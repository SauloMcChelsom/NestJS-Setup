## tutorial de ORM
https://orkhan.gitbook.io/typeorm/docs/transactions
https://typeorm.io/#/transactions 
https://orkhan.gitbook.io/typeorm/docs/select-query-builder
https://www.tutorialspoint.com/typeorm/typeorm_query_builder.htm
https://github.com/typeorm/typeorm/blob/master/docs/find-options.md
https://www.techiediaries.com/typeorm-fulltext-search/

## tutorial de streaming
https://udgwebdev.github.io/video-streaming-com-nodejs/
https://dev.to/abdisalan_js/how-to-code-a-video-streaming-server-using-nodejs-2o0
https://docs.microsoft.com/pt-br/azure/media-services/latest/stream-live-tutorial-with-nodejs
https://github.com/ErickWendel/upload-multiple-files-yt
https://www.geeksforgeeks.org/how-to-make-a-video-call-app-in-node-js/
https://levelup.gitconnected.com/building-a-video-chat-app-with-node-js-socket-io-webrtc-26f46b213017

## exemplo de fazer teste 2e2
https://github.com/p-salmon/nestjs-typeorm-integration-tests/blob/master/src/user/user.e2e-spec.ts

## funcionalidade desejadas futuras
Chat
upload-> video|music|image|files
download-> video|music|image|files
Live Video Stream
Video Streaming
music Streaming
imagens exibição
share screen and video call
criar audio

## atividades em desenvolvimentos
0 testar todos endpoint e organizar o isonimia
1 response para sucessor e error padrao
2 services -> testar e refatorar 
3 teste -> criar os teste
4 pagina de login
5 ajustar o readme

6 patronizar os HttpException nos models ex:
C:\workspaces\NestJS-Setup\src\model\user-entity\user-entity.model.ts
public async getUserByUid(uid: string) {
    try {

    const res = await this.repository.findOne({ where: { uid: uid } })

    if (res) {
        return res
    }

    throw new HttpException({
        code:code.UID_NOT_FOUND,//codigo da mensagem, para ser manipulada no front
        message: message.UID_NOT_FOUND,//mensagem a ser exibita ao usuario, como um titulo
        description: "Must be passed a valid or existing uid",//descrição o detalha do erro e como resolver
    }, HttpStatus.NOT_FOUND)

    } catch (e: any) {
    throw new HttpException(e.response, e.status)
    }
}

revisar 
returno de ): Promise<Like>

await